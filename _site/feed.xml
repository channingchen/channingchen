<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>papa@melonfamily</title>
    <description>Here is papa's blog in melonfamily.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 20 Oct 2017 08:39:31 +0800</pubDate>
    <lastBuildDate>Fri, 20 Oct 2017 08:39:31 +0800</lastBuildDate>
    <generator>Jekyll v3.3.0</generator>
    
      <item>
        <title>活出生命的意义</title>
        <description>&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;书名&lt;/th&gt;
      &lt;th&gt;作者&lt;/th&gt;
      &lt;th&gt;字数&lt;/th&gt;
      &lt;th&gt;开始时间&lt;/th&gt;
      &lt;th&gt;完成时间&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;活出生命的意义&lt;/td&gt;
      &lt;td&gt;维克多·E·弗兰克尔&lt;/td&gt;
      &lt;td&gt;2h&lt;/td&gt;
      &lt;td&gt;2017-09-07&lt;/td&gt;
      &lt;td&gt;2017-09-10&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;section&quot;&gt;核心&amp;amp;脑图&lt;/h2&gt;

&lt;h2 id=&quot;section-1&quot;&gt;总结&lt;/h2&gt;

&lt;h2 id=&quot;section-2&quot;&gt;摘录&lt;/h2&gt;
</description>
        <pubDate>Wed, 27 Sep 2017 11:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2017/09/27/mans-search-for-meaning.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2017/09/27/mans-search-for-meaning.html</guid>
        
        <category>vision</category>
        
        
        <category>读书笔记</category>
        
      </item>
    
      <item>
        <title>穷查理宝典</title>
        <description>&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;书名&lt;/th&gt;
      &lt;th&gt;作者&lt;/th&gt;
      &lt;th&gt;字数&lt;/th&gt;
      &lt;th&gt;开始时间&lt;/th&gt;
      &lt;th&gt;完成时间&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;穷查理宝典&lt;/td&gt;
      &lt;td&gt;查理·芒格&lt;/td&gt;
      &lt;td&gt;12h&lt;/td&gt;
      &lt;td&gt;2017-08-09&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;section&quot;&gt;核心&amp;amp;脑图&lt;/h2&gt;

&lt;h2 id=&quot;section-1&quot;&gt;总结&lt;/h2&gt;

&lt;h2 id=&quot;section-2&quot;&gt;摘录&lt;/h2&gt;
</description>
        <pubDate>Wed, 27 Sep 2017 10:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2017/09/27/poor-charlies-almanack.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2017/09/27/poor-charlies-almanack.html</guid>
        
        <category>vision</category>
        
        
        <category>读书笔记</category>
        
      </item>
    
      <item>
        <title>log4j:RollingFileAppender Improvment</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;发现问题&lt;/h2&gt;
&lt;p&gt;A系统的rpc服务（使用HSF框架）调用方B反馈，最近总是会调用服务超时，发生的时间没有规律，每天大概几百次左右，所以找到A系统的负责人，也就是我，查找问题。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;查找原因&lt;/h2&gt;
&lt;p&gt;了解有超时现象后，先让调用方B提供具体的rpc日志，想看一看是哪些接口、在什么时间超时。调用方B提供了两天左右的准确的超时日志，研究后发现，大约集中在两个接口上，这两个接口都是调用非常频繁的接口，且都有缓存，性能上应该很好。&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;通过公司中的监控平台，仔细对照了超时发生时的时间段，发现从tomcat中采集出的spring bean运行时间日志，没有什么异常，那些业务方B反馈的接口耗时最多的才100ms，平均20ms不到；&lt;/li&gt;
  &lt;li&gt;又看了下那些时间段的JVM的各项指标，没有FullGC，内存情况良好，磁盘读写良好，线程数倒是有有些突刺，但时间上吻合程度不高，所以没怎么在意；&lt;/li&gt;
  &lt;li&gt;好在调用方的日志里面有准确的时间和查询参数，结合这两项指标，也能找到对应机器上的rpc日志，发现确实有超时，超时的记录也很明确（HSF日志提供了一些调用链的分析，能够看清远程调用耗时和本地耗时）；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;经过上面一轮搜寻一无所获，仅仅是明确了那些时间点上，接口确实变慢了，变慢的原因也是发生在应用里，却没法确定到底是什么原因。在代码层面寻找可能的耗时操作也一无所获，所以注意力仍旧集中到了分析调用方B的超时日志上。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2017-09-29 03:29:48,281 ERROR helper.XXXServiceHelper:85 queryInfo - XXXServiceHelper queryInfo error;uid=1434302683660970
2017-09-29 03:29:48,438 ERROR helper.XXXServiceHelper:85 queryInfo - XXXServiceHelper queryInfo error;uid=1992173055745769
2017-09-29 05:42:33,652 ERROR helper.XXXServiceHelper:85 queryInfo - XXXServiceHelper queryInfo error;uid=1522284039696604
2017-09-29 05:42:34,174 ERROR helper.XXXServiceHelper:85 queryInfo - XXXServiceHelper queryInfo error;uid=1522284039696604
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;业务方B的日志大概没隔1小时会发生几例超时，有时候不到1小时。找了其中一条超时日志（例如2017-09-29 03:29:48这条），把A系统的rpc日志、HSF日志、APP日志等等看了一圈，实在看不出什么特别的。正一筹莫展的时候，突然发现了一段熟悉的时间：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[papa@melonfamily.host /data/www/logs/tomcat7/xxxApp]$ll
total 16431224
-rw-rw-r-- 1 tomcat tomcat 1003283623 Sep 29 03:29 rpcTrace.log.2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;不会这么巧吧？日志滚动的时间和发生超时的时间基本重合，查看下这个时候的最后一条rpc日志吧？&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[papa@melonfamily.host /data/www/logs/tomcat7/xxxApp]$tail -n 1 rpcTrace.log.2
2017-09-29 03:29:46,021 [] INFO  rpcTraceLogger - {&quot;xxxxInfo&quot;:&quot;xxxValue&quot;,&quot;method&quot;:&quot;queryInfo&quot;,&quot;service&quot;:&quot;XXXService&quot;,&quot;startTime&quot;:1506626986021,&quot;success&quot;:true,&quot;traceInfo&quot;:{&quot;requestId&quot;:&quot;129.2_1506626986021_6&quot;,&quot;stepIndex&quot;:&quot;0&quot;,&quot;traceType&quot;:&quot;hsf_provider&quot;},&quot;usedTime&quot;:2160}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这条日志的开始时间2017-09-29 03:29:46加上2s后，恰好等于对方机器的超时记录时间。赶紧看了看当天其他的机器的日志滚动时间以及超时时刻，都吻合!看来日志滚动八成是造成服务超时的原因了。&lt;/p&gt;
&lt;h2 id=&quot;section-2&quot;&gt;追寻根源&lt;/h2&gt;
&lt;p&gt;日志滚动为何会导致那一时刻的服务超时呢？直观来想，应该是记录rpc日志时恰好遇到日志滚动，导致那个线程阻塞了，这也能解释为何JVM线程监控上在某些超时时间点上有毛刺，虽然并不是完全吻合。同时，因为rpc日志使用的是切面的方式环绕在service的方法上下的，所以tomcat中关于bean执行时间的监控并不能覆盖到rpc日志的阻塞时间，这也解释了为何观察出问题时段的bean执行时间不曾有超时现象。
A系统使用了log4j的RollingFileAppender来做rpc的日志记录，MaxBackupIndex设置为10，MaxFileSize设置为1G。linux上删除1G文件时确实会有些许的耗时，但日志记录是怎样和日志滚动互相阻塞同步的呢？下面是使用log4j记录日志时的时序图：
&lt;img src=&quot;/assets/img/rollingFileAppender-timeline.png&quot; alt=&quot;&quot; /&gt;
doAppend方法带有sychronized关键字，而rollOver方法被包含在doAppend中，当日志数目达到设定值且写入超过限定大小时，会执行文件删除。所以尽管rollOver方法本身没做同步，但其实跟记录日志是在一块竞争执行的，最终导致删除大文件时会卡住日志记录。&lt;/p&gt;
&lt;h2 id=&quot;section-3&quot;&gt;寻找方案&lt;/h2&gt;
&lt;p&gt;如何优化日志滚动呢？下面是我采取的一个方案：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class MyRollingFileAppder extends RollingFileAppender {
    class DeleteFileTask implements Runnable {
        File file;

        DeleteFileTask(File file) {
            this.file = file;
        }

        public void run() {
            if (null == file) {
                return;
            }
            if (file.exists()) {
                LogLog.debug(System.currentTimeMillis() + &quot; start delete &quot; + file.getAbsolutePath());
                file.delete();
                LogLog.debug(System.currentTimeMillis() + &quot; finish delete &quot; + file.getAbsolutePath());
            }
        }
    }

    @Override
    public void rollOver() {
        File target;
        File file;

        LogLog.debug(&quot;rolling over count=&quot; + ((CountingQuietWriter) qw).getCount());
        LogLog.debug(&quot;maxBackupIndex=&quot; + maxBackupIndex);

        // If maxBackups &amp;lt;= 0, then there is no file renaming to be done.
        if (maxBackupIndex &amp;gt; 0) {
            // Map {(maxBackupIndex), ..., 2, 1} to {maxBackupIndex+1, ..., 3, 2}
            for (int i = maxBackupIndex; i &amp;gt;= 1; i--) {
                file = new File(fileName + &quot;.&quot; + i);
                if (file.exists()) {
                    target = new File(fileName + '.' + (i + 1));
                    if (target.exists()) {
                        //if target exists, means DeleteFileTask is too slow. we have no choice but delete synchronously.
                        LogLog.debug(
                                System.currentTimeMillis() + &quot;, rollOver: delete log synchronously happened, file=&quot; + target
                                        .getAbsolutePath());
                        target.delete();
                    }
                    LogLog.debug(&quot;Renaming file &quot; + file + &quot; to &quot; + target);
                    file.renameTo(target);
                }
            }

            // Rename fileName to fileName.1
            target = new File(fileName + &quot;.&quot; + 1);

            this.closeFile(); // keep windows happy.

            file = new File(fileName);
            LogLog.debug(&quot;Renaming file &quot; + file + &quot; to &quot; + target);
            file.renameTo(target);

            // Delete the overflow(maxBackupIndex+1) file asynchronously, to keep Windows happy.
            file = new File(fileName + '.' + (maxBackupIndex + 1));
            if (file.exists()) {
                DeleteFileTask task = new DeleteFileTask(file);
                task.run();
            }
        }

        try {
            // This will also close the file. This is OK since multiple
            // close operations are safe.
            this.setFile(fileName, false, bufferedIO, bufferSize);
        } catch (IOException e) {
            LogLog.error(&quot;setFile(&quot; + fileName + &quot;, false) call failed.&quot;, e);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;MyRollingFileAppder集成了RollingFileAppder，并覆盖了rollOver方法，RollingFileAppder中的rollOver方法做了以下几件事情：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;如果xxx.log.MaxBackupIndex存在，证明日志数目已满，直接删除这个文件；&lt;/li&gt;
  &lt;li&gt;对xxx.log.MaxBackupIndex-1~xxx.log.1，如果存在就重命名，依次向后滚动一下，变成xxx.log.MaxBackupIndex~xxx.log.2;&lt;/li&gt;
  &lt;li&gt;将目前满的文件从xxx.log重命名为xxx.log.1，并创建新的xxx.log;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我们已经知道耗时发生在第一步，所以优化的代码中，改进了这个流程：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;对xxx.log.MaxBackupIndex~xxx.log.1，如果存在，测试其增加1后的文件是否存在，如果不存在则重命名，依次向后滚动一下，变成xxx.log.MaxBackupIndex+1~xxx.log.2；如果其增加1后的文件存在，则&lt;strong&gt;同步&lt;/strong&gt;删除“增加1后的文件”;&lt;/li&gt;
  &lt;li&gt;将目前满的文件从xxx.log重命名为xxx.log.1，并创建新的xxx.log;&lt;/li&gt;
  &lt;li&gt;如果xxx.log.MaxBackupIndex+1存在，证明日志数目已满，&lt;strong&gt;异步&lt;/strong&gt;删除这个文件；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这里把删除动作后置，并异步，通过这种方法剔除删除对于记录日志的影响；但也存在可能，当删除真的很慢，异步删除未完成时，新日志已经被打满触发了下一次滚动，此时已然采用保守的同步删除法。其实这种情况在实际应用中基本不可能发生：删除过慢是因为文件较大，文件分片较大那么就不会那么容易被填满，简单来说，就是让有意义的日志填满一个1G的文件耗时，肯定要大于把这个1G文件直接删除。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;实验结果&lt;/h2&gt;
&lt;p&gt;本地测试时流程能符合预期。目前已经部署A系统的预发环境，尚未部署到生产，部署过后来更新结果。&lt;/p&gt;
</description>
        <pubDate>Wed, 27 Sep 2017 09:00:00 +0800</pubDate>
        <link>http://localhost:4000/programming/2017/09/27/log4j-improve-RollingFileAppender.html</link>
        <guid isPermaLink="true">http://localhost:4000/programming/2017/09/27/log4j-improve-RollingFileAppender.html</guid>
        
        <category>Java,log4j</category>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>人类简史</title>
        <description>&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;书名&lt;/th&gt;
      &lt;th&gt;作者&lt;/th&gt;
      &lt;th&gt;字数&lt;/th&gt;
      &lt;th&gt;开始时间&lt;/th&gt;
      &lt;th&gt;完成时间&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;人类简史：从动物到上帝&lt;/td&gt;
      &lt;td&gt;尤瓦尔·赫拉利&lt;/td&gt;
      &lt;td&gt;307k&lt;/td&gt;
      &lt;td&gt;2017-09-09&lt;/td&gt;
      &lt;td&gt;2017-09-30&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;section&quot;&gt;核心&amp;amp;脑图&lt;/h2&gt;

&lt;h2 id=&quot;section-1&quot;&gt;总结&lt;/h2&gt;

&lt;h2 id=&quot;section-2&quot;&gt;摘录&lt;/h2&gt;
</description>
        <pubDate>Wed, 27 Sep 2017 09:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2017/09/27/sapiens.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2017/09/27/sapiens.html</guid>
        
        <category>vision</category>
        
        
        <category>读书笔记</category>
        
      </item>
    
      <item>
        <title>跨学科(cross-disciplinary)阅读指南</title>
        <description>&lt;h2 id=&quot;why-cross-disciplinary&quot;&gt;Why cross-disciplinary?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;To the man with a hammer, the world looks like a nail.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;详情&lt;/h2&gt;
&lt;p&gt;学科和书目会持续更新，读完的内容要求有系统的笔记和总结，并标记已读。持续时间约为2017-2020。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;分类I&lt;/th&gt;
      &lt;th&gt;分类II&lt;/th&gt;
      &lt;th&gt;书目&lt;/th&gt;
      &lt;th&gt;开始时间&lt;/th&gt;
      &lt;th&gt;结束时间&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;基础科学&lt;/td&gt;
      &lt;td&gt;数学&lt;/td&gt;
      &lt;td&gt;什么是数学&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;物理&lt;/td&gt;
      &lt;td&gt;物理世界奇遇记&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;化学&lt;/td&gt;
      &lt;td&gt;化学史传&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;统计学&lt;/td&gt;
      &lt;td&gt;女士品茶&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;人文社科&lt;/td&gt;
      &lt;td&gt;生物&lt;/td&gt;
      &lt;td&gt;普通生物学&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;经济&lt;/td&gt;
      &lt;td&gt;经济学原理&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;心理学&lt;/td&gt;
      &lt;td&gt;心理学与生活&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;地理学&lt;/td&gt;
      &lt;td&gt;地理学与生活&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;广告学&lt;/td&gt;
      &lt;td&gt;一个广告人的自白&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;语言学&lt;/td&gt;
      &lt;td&gt;语言本能&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;法学&lt;/td&gt;
      &lt;td&gt;法律之门&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;医学&lt;/td&gt;
      &lt;td&gt;病者生存&lt;/td&gt;
      &lt;td&gt;2017-09-01&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;建筑学&lt;/td&gt;
      &lt;td&gt;像建筑师那样思考&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;航空&lt;/td&gt;
      &lt;td&gt;我怎样设计飞机&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;机械&lt;/td&gt;
      &lt;td&gt;最大的小发明&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;音乐&lt;/td&gt;
      &lt;td&gt;古典作曲家排行榜&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Wed, 27 Sep 2017 09:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E8%AF%BB%E4%B9%A6%E8%AE%A1%E5%88%92/2017/09/27/cross-disciplinary-reading.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E8%AF%BB%E4%B9%A6%E8%AE%A1%E5%88%92/2017/09/27/cross-disciplinary-reading.html</guid>
        
        <category>misc</category>
        
        
        <category>读书计划</category>
        
      </item>
    
      <item>
        <title>奇特的一生APP</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;产品创意与概念&lt;/h2&gt;
&lt;h2 id=&quot;section-1&quot;&gt;标准流程&lt;/h2&gt;
</description>
        <pubDate>Wed, 27 Sep 2017 09:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E6%88%91%E7%9A%84%E4%BA%A7%E5%93%81/2017/09/27/my-app.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%88%91%E7%9A%84%E4%BA%A7%E5%93%81/2017/09/27/my-app.html</guid>
        
        <category>自我实现</category>
        
        
        <category>我的产品</category>
        
      </item>
    
      <item>
        <title>速读扩展(每天听本书)</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;清单革命&lt;/h2&gt;
&lt;h2 id=&quot;section-1&quot;&gt;思想本质&lt;/h2&gt;
&lt;h2 id=&quot;section-2&quot;&gt;你为什么而工作&lt;/h2&gt;
&lt;h2 id=&quot;section-3&quot;&gt;自私的基因&lt;/h2&gt;
&lt;h2 id=&quot;section-4&quot;&gt;奇特的一生&lt;/h2&gt;
&lt;h2 id=&quot;section-5&quot;&gt;浪潮之巅&lt;/h2&gt;
&lt;h2 id=&quot;section-6&quot;&gt;未来简史&lt;/h2&gt;
&lt;h2 id=&quot;section-7&quot;&gt;枪炮、病菌与钢铁&lt;/h2&gt;
&lt;h2 id=&quot;section-8&quot;&gt;数学之美&lt;/h2&gt;
&lt;h2 id=&quot;section-9&quot;&gt;科技想要什么&lt;/h2&gt;
&lt;h2 id=&quot;section-10&quot;&gt;盗火&lt;/h2&gt;
&lt;h2 id=&quot;section-11&quot;&gt;给忙碌者的天体物理学&lt;/h2&gt;
&lt;h2 id=&quot;section-12&quot;&gt;日本制造&lt;/h2&gt;
&lt;h2 id=&quot;section-13&quot;&gt;菊与刀&lt;/h2&gt;
&lt;h2 id=&quot;section-14&quot;&gt;完全写作指南&lt;/h2&gt;
&lt;h2 id=&quot;section-15&quot;&gt;混乱&lt;/h2&gt;
&lt;h2 id=&quot;section-16&quot;&gt;反脆弱&lt;/h2&gt;
&lt;h2 id=&quot;section-17&quot;&gt;异类&lt;/h2&gt;
&lt;h2 id=&quot;section-18&quot;&gt;三体：地球往事、黑暗森林、死神永生&lt;/h2&gt;
&lt;h2 id=&quot;section-19&quot;&gt;2001太空漫游、2010太空漫游、2061太空漫游、3001太空漫游&lt;/h2&gt;
&lt;h2 id=&quot;section-20&quot;&gt;怪诞行为学&lt;/h2&gt;
</description>
        <pubDate>Wed, 27 Sep 2017 09:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E6%AF%8F%E5%A4%A9%E5%90%AC%E6%9C%AC%E4%B9%A6/2017/09/27/listen-to-a-book.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%AF%8F%E5%A4%A9%E5%90%AC%E6%9C%AC%E4%B9%A6/2017/09/27/listen-to-a-book.html</guid>
        
        <category>vision</category>
        
        
        <category>每天听本书</category>
        
      </item>
    
      <item>
        <title>博客记</title>
        <description>&lt;h2 id=&quot;github-blogjekyllfree-theme&quot;&gt;Github Blog+Jekyll+Free Theme&lt;/h2&gt;
</description>
        <pubDate>Wed, 27 Sep 2017 09:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E4%BA%92%E8%81%94%E7%BD%91/2017/09/27/blog.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E4%BA%92%E8%81%94%E7%BD%91/2017/09/27/blog.html</guid>
        
        <category>blog</category>
        
        
        <category>互联网</category>
        
      </item>
    
      <item>
        <title>翻墙记</title>
        <description>&lt;h2 id=&quot;nordvpn&quot;&gt;NordVPN&lt;/h2&gt;
&lt;h2 id=&quot;openwrtopenvpn&quot;&gt;OpenWRT&amp;amp;OpenVPN&lt;/h2&gt;
&lt;h2 id=&quot;ip&quot;&gt;IP筛选&lt;/h2&gt;
</description>
        <pubDate>Wed, 27 Sep 2017 09:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E4%BA%92%E8%81%94%E7%BD%91/2017/09/27/about-gfw.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E4%BA%92%E8%81%94%E7%BD%91/2017/09/27/about-gfw.html</guid>
        
        <category>GFW</category>
        
        
        <category>互联网</category>
        
      </item>
    
      <item>
        <title>围城</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;他要离开这家公司，老板找他聊了三次&lt;/h2&gt;
&lt;p&gt;他还没毕业那会，就在杭州的A公司实习，挺努力的实习然后留了下来，成为了A公司的正式员工。但当时，他的女朋友（现在的老婆）毕业找工作却去了上海，毕竟那边的工作更好一些更有发展前途。努力的年轻人更注重职业的发展，自然而然他们的生活上开始了”双城记“，不过好在这两个城市离得没有那么远，周末还是能见一面。
这样的日子持续了两年半，现在小两口觉得应该团圆了，两地呆着跑来跑去确实挺痛苦，那究竟去哪里呢？充分考虑了之后，他觉得他应该去上海，原因很简单，那个城市更大。年轻人不应该逃离北上广，而应该冲进北上广，因为没有背景人脉，只有在大城市完善的规则下，才有施展本领的可能。想好了这些后，他开始找工作，找到工作后，跟老板提出了辞职。老板很开明，对员工的去留很大度，但希望他们如果要走，一定要去一个更好的地方，当老板了解了他要去的下一份工作，摇了摇头，意思很明了。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;第一次聊天，工作中的事与工作中的人&lt;/h2&gt;
&lt;p&gt;第一次聊天的内容集中在了A公司本身，以及他在A公司的工作。A公司作为一个大公司，有很多很多的员工，每个人有很多很多的工作，就像其他大部分的大公司一样。老板觉得他可能不喜欢他正在做的事情，或者不喜欢正在共事的人。所以第一次聊天他们大部分的话题集中在工作中的事和人身上。
对于这些工作中的事情，有一些是重要的，有一些是不那么重要的，还有一些可能是完全无效的。他只是一个小员工，是凭什么做出了这些判断呢？老板帮他梳理了下，另外他自己总结后其实有两点：1.基于自己每天做的事情，沉浸在一小块业务领域久了之后，就会有一种感觉，做这个是有益的、做那个是无益的；2.朴素的概率论和辩证的世界观，例如，我们仅凭已知的知识，就能知道世界上存在我们未知的东西，由此推论，领导们和员工们都不是全知的，所以必定有一些事情是无用的，究竟哪些有用哪些无用，现在是无法推断的，只有到了以后再往前看，才能看清楚。
那对于A公司里，和他共事的人呢？他觉得大部分人是用屁股决定脑袋，虽然他理解这种行为，但是并不是十分认同。老板能理解他的困惑，给了他一个全新的视角：一群人做事，如果没有一个英雄式的人物能拍板，屁股决定脑袋很正常，与其感慨和互相撕逼，不如试试换位思考，把自己挪到在场所有人的位置上轮一遍，看看你自己有什么好的想法。这时窘境就会变成一个有趣的习题，来尝试解解看？最大的好处就是，即便窘境本身解不了，换位思考会带来额外的收获。他觉得这个观点很有用，听得津津有味。
其实第一次聊天有点跑题，他虽然仅在A公司工作过，但是他明白在其他大部分公司，都有这样工作中的事情和这样共事的人，离开A公司依然会碰到这样的事这样的人，这不是让他离开的理由。&lt;/p&gt;

&lt;h2 id=&quot;az&quot;&gt;第二次聊天，由A到Z&lt;/h2&gt;
&lt;p&gt;第一次聊天没有改变他的想法，他仍旧发起了离职流程。然后老板找他进行了第二次聊天，这次的聊天集中在A公司和Z公司的比较上。
A公司是个美股上市的大型公司，国内的互联网巨头；相比来看，Z公司就看起来小很多，而且据说内部还乱糟糟的。老板认为A公司是一个大公司，所以在A公司里工作，可能处理的会是比较复杂的业务场景（要解决各类高并发、高可用的问题），这些只有在大公司的环境上的问题，会push你学习，push你成长；而反观Z公司，你去做的东西可能没有那么多人用，可能没有那么多复杂的问题。对此他能理解，但并不认同，在A公司他每天大部分时间都在处理日常的琐事和常规的业务需求，解决复杂问题？有过，但真的很少，更多的时候，在和历史上的大坑做斗争，在为上面老板们的KPI导向的决策买单；但在Z公司，项目是新的内部创业项目，没那么陈旧的历史，没那么多人用，可能就有更多的试错机会（敢用更先进的技术），会拓宽知识面。最终他和老板的讨论渐渐趋同，关于“码农”（而非工程师）工作的本质——都是码那些业务逻辑，干一些重复工作，A和Z又有多大的不同呢？最后看来这次的聊天最终还是在集中在工作内容上，他感觉还是浮于表面，因为他内心真正所想仍然没有表达。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;第三次聊天，个体、环境和自我实现&lt;/h2&gt;
&lt;p&gt;最后一次面谈发生在国庆节之前，这次聊天的内容没有集中在工作上，而是说到了人生的意义、个体的意义。老板觉得一条规划好的路，应该是先钻研技术，然后在技术成熟后，带领团队执掌业务，在A公司达到一个优异的水平后，最后考虑好各类机会后，再做跳槽。那个时候你衣食无忧，转而跳槽的方向就是奔着财务自由和实现人生意义去的。已经发展得非常庞大的A公司没法实现你的目标，但你要利用好这块跳板。但他并不这么认为，或许是因为最近读了一些书，以为自己略微有了一些”未来的前瞻“。他不相信一条路能这么“规划”好，并且如此规划的路所达到的重点，可能并不是他想要的。要说他这么认为的原因，很大一部分是从书中和现实社会中了解的——变化这么快的世界，想规划一条路，然后沿着这条路走下去，谈何容易。在他看来，很可能以后他会有多个职业，多重身份，这个世界里见多识广比单一领域里面极尽钻研更有用。并不是说极尽钻研不好，而是在达成他的目标中，用处不大。那么他的目标，或者说他人生的自我实现是什么呢？实话说，他不知道。他目前唯一知道的是自己以前太过于专一，而且是思维僵化的专一做一件事情，这是以后要极力避免的，同时，要把大部分力气花在拓展知识上面，或许按照这点来说，他的人生是为了能见识更多东西——从而发现人生的自我实现？以前他很想赚好多好多钱，把财务自由作为人生目标，但现在他知道，财务自由绝对不会是“人生目标”，人生目标是一个比财务自由高出很多的东西，财务自由可能是实现这个目标的一个附加bonus。当你有一个能够很好的理解这个世界的思想的时候，财富自然也会很快的聚集在你身边。很多人都知道这个话，但很少有人相信，更少有人以此为行动指南。所以把目标放高，把目标放长远，在工作中遇见的人和事，从A到Z，真的有那么重要么？更进一步，这个方向，是指向你结果的方向么？也未可知。&lt;/p&gt;

&lt;p&gt;其实在最后一次谈话结束后，他依旧纠结了很久——不清楚自己的决定是对的还是错的。又是过了好久，他才知道自己的决定没有对错之分，重点在于决定后，选定的路会被自己走成什么样子。世界上的境况大多都是“围城”，城里面的人想出来，城外面的人想进去，既然不知道想去的到底是哪座城，又或者他根本没发觉可能他的喜好是“进进出出”，那么，这么急着下结论判定下一座城是好是坏，又有多大的意义呢。围城困境的解决方法不是进出，而是上下，努力飞到上面去看，唯有这样才不会囿于进出的狭窄选择而两难。&lt;/p&gt;
</description>
        <pubDate>Wed, 27 Sep 2017 08:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E6%9D%82%E8%AE%B0/2017/09/27/init.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%9D%82%E8%AE%B0/2017/09/27/init.html</guid>
        
        <category>misc</category>
        
        
        <category>杂记</category>
        
      </item>
    
  </channel>
</rss>
